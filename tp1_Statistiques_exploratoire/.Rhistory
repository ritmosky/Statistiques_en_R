a=2
is.inf(a)
is.Inf(a)
is.infinite(a)
is.null(a)
is.na(a)
is.nan(a)
is.nan()
abline(0,1)
notes10 > 6
c(1, 2, 3, 4, 5)
notes <- c(18, 1.5, 9.5, 15.5, 0.5, 14.5, 10)
notes <- c(notes, 4)
v <- c(1, 2, 3, 4, 5)
u <- c(5, 4, 3, 2, 1)
v + 1
2*v
u * v   # il faut qu'ils aient la même taille
v > pi
u == 2
notes10 <- notes/2
notes10 > 6
sum(notes10 > 6)
notes10
notes10[0]
notes10[1]
notes10>6
sum(notes10)
length(notes10 > 6)
length(notes10)
length(notes10)
length(notes10=1)
length(notes10=+1)
length(notes10==1)
length(notes10>6)
notes10[notes10>6]
notes10
sum(notes10[notes10>6])
sum(notes10[notes10>6])//2
2//é
2//2
2%2
sum(notes10[notes10>6])/length(notes10[notes10>6])
sum(notes > 10)
bool <- notes > 10
length(notes[bool])
sum(notes > 10)
length(notes > 10)
length(notes10 > 6)
notes10[notes10>6]
length(notes10[notes10>6])
sum(notes > 10)
length(notes[notes > 10])
notes
floor(notes)
floor(3.3)
floor(3.9)
notes==floor(notes)
notes==!floor(notes)
notes=!floor(notes)
notes=!floor(notes)
notes!=floor(notes)
notes==floor(notes)
notes==floor(notes)
notes
notes
notes <- c(18, 1.5, 9.5, 15.5, 0.5, 14.5, 10)
notes <- c(notes, 4)
notes==floor(notes)
notes!=floor(notes)
notes2 <- notes-2
notes2
notes2 <0
notes2 <0 = 2
choix <- c(FALSE, FALSE, TRUE, FALSE, TRUE)
v[choix]
choix
v
choix <- c(FALSE, FALSE, TRUE, FALSE, TRUE)
v[choix]
v
f
collection <- c("R", "R", "V", "B", "V")
f <- factor(collection)
f
ff <- ordered(collection)
ff
ff <- factor(collection, ordered=TRUE)
ff
ff < "V"
ff <- factor(collection, ordered=TRUE, levels=c("R", "V", "B"))
ff
ADN <- c("A", "C", "A","A","G","A","T","G","C","C","A","T","T","G","T","C")
ADN <- factor(ADN)
nlevels(ADN)
levels(ADN)
ADN <- factor(ADN)
f
f>"E"
ff>"E"
ff
ff > "E"
ff < "V"
ff < "V"
ff < "v"
ff < "V"
ff < ""
ff < "R"
ADN > "A"
ff<> "A"
ff< "A"
ff < "A"
ff< "V"
ff < "E"
ff <"R"
f<"R"
ff > "al"
ff <- factor(collection, ordered=TRUE, levels=c("R", "V", "B"))
ff < "R"
ff < "A"
levels(ff)    # lister les modalités
levels(ff)    # lister les modalités
levels(ADN)    # lister les modalités
length(ff)    # taille du vecteur
ff
ADN
table(ADN)
summary(ADN)
summary(ADN)
table(ADN)
table(ADN)[1]
table(ADN)<2
table(ADN)
table(ADN)<5
table(ADN)["A"]
length(ADN[ADN==levels(ADN)[1]])
length(ADN[ADN==levels(ADN)[1]])
sum(ADN[ADN==levels(ADN)[1]])
sum(ADN==levels(ADN)[1])
f <- factor(c("R", "V", "B", "R", "V", "B"))
v <- 5:10
df <- data.frame(v, f, v>7)
df
X <- read.csv("sy02.data")
setwd("/Users/taoufiq/Documents/school/Utc/sem02/SY02/TP/tp1")
X <- read.csv("sy02.data")
X
table(X)
summary(X)  # résumé de chaque variable
names(X)  # nom des variables
nrow(X)   # nombre de lignes
X$correcteur.median
nrow(X)   # nombre de lignes
summary(X)  # résumé de chaque variable
X$correcteur.median <- factor(X$correcteur.median)
summary(X)  # résumé de chaque variable
X[1:10,]          # Extraire les 10 premières lignes
X[c(1,3), c(1,4)]
X[X$median > 10,]
X[X$median > 10]
X[,X$median > 10]
X[X$median > 10,]
X[X$median > 10,1]
X$median < X$final
sum(X$median < X$final)
mean(X$median < X$final)
202/280
X
length(x )
length(x)
nraw(x)
nraws(x)
nrow(X)
sum(X$median < X$final)
202/297
mean(X$median < X$final)
sum(X[X$median > 10,])
nrow(X[X$median > 10,])
nrow(X$median < X$final)
X[(X$median < X$final),]
sum(X[(X$median < X$final),])
sum(X$median)
sum(X$median < X$final)
(nrow(X[X$median < X$final, ])
;
nrow(X[X$median < X$final, ]
)
nrow(X[X$median < X$final, ])/nrow(X)
var(X$median)         # variance empirique corrigé
sd(X$median)          # écart type empirique corrigé
d(X$median)*d(X$median)
2*2
sqrt(2)
log(10)
log10(10)
mean(X$median, trim=0.1)
sort(X$median)
quantile(X$median)  # quartiles
quantile(X$median)[3]
IQR(X$median)[3]
IQR(X$median)
iqr <- quantile(X$median)[4]-quantile(X$median)[2]
iqr
mean(X$median, trim=0.1)
length(X$median)
X$median[3]
mean(X$median[11:nrow(X$median)-10])
X$median[]
mean(X$median[11:(nrow(X$median)-10)])
nrow(X$median)
length(X$median)
mean(X$median[11:(length(X$median)-10)])
nm <- X[, "median"]
nms <- sort(nm)
l <- length(nm)
mean(nms[11:(l - 10)])
l
(length(X$median)-10)
(l - 10)
sum(nm)
sum(X$median)
sum(X$median[11:(length(X$median)-10)])
sum(nms[11:(l - 10)])
sum(X$median[11:(l-10)])
sum(nms[11:(l - 10)])
sum(X$median[11:(length(X$median)-10)])
mean(X$median[11:(length(X$median)-10)])
mean(X$median, trim=0.1)
t <- table(ADN) # compte nombre d'occurrences de chaque modalité
t
barplot(table(X$correcteur.median))
filtre <- X[X$correcteur.final == "DH","final"]
boxplot(filtre)
boxplot(final ~ correcteur.final, data=X)
stripchart(final ~ correcteur.final, data=X)
stripchart(final ~ correcteur.final, data=X, jitter=0.1)
stripchart(final ~ correcteur.final, data=X, jitter=0.1)
boxplot(filtre)
plot(final ~ median, data=X)  # les 2 variables sont correlés final = f(median)
hist(X$final, breaks = c(0, 15, 20))
length(X[X$final<15,])
length(X[X$final<=15,])/length(X$final)
length(X[X$final<=15,])/length(X$final)/15
final <- X$final
length(final[final <= 15])/length(final)/15
length(final[final <= 15])
length(X[X$final<=15,])
length(X$final)
length(X$final[X$final<=15])
length(X$final[X$final<=15,])
length(X[X$final<=15,])/length(X$final[X$final<=15]) /15
length(X$final)
length(X$final[X$final<=15])/length(X$final) /15
length(X$final[X$final>15])/length(X$final) /5
length(X)
v
v[2]
v["2"]
c(1, 2, 3, 4, 5)
setwd("/Users/taoufiq/Documents/school/Utc/sem02/SY02/TP/tp1")
load("cctp_P2022.RData")
ls()
Y <- load("cctp_P2022.RData")
Y
Y
length(Y)
nrow(Y)
nraw(Y)
Y[1,1]
a
load("cctp_P2022.RData")
cctp_P2022
cctp_P2022.RData
MR649
MR649[1]
MR649[1,1]
suMR649[is.na(MR649)]
MR649[is.na(MR649)]
MR649[1,1]
MR649[1]
is.na(MR649)
sum(is.na(MR649))
naa = is.na(MR649)
sum(!is.na(MR649))
ok = !is.na(MR649)
sum(ok)
mean(oj)
mean(ok)
MR649[naa=mean(ok)]
naa = is.na(MR649)
sum(naa)
naa=ok
naa = is.na(MR649)
sum(naa)
mean(MR649)
MR649[naa]=ok
ok = !is.na(MR649)
MR649[naa]=ok
MR649[naa]=mean(ok)
sum(naa)
mean(MR649)
MR649NA
MR649[naa]=MR649NA
mean(MR649)``
mean(MR649)
sd(MR649)
MR250
sum(MR250[MR250=-99])
sum(MR250[MR250==-99])
library(MASS)
head(painters)
hist(painters)
?hist
painters$notes
painters$note
head(painters)   # painters est un dataFrame
hist(painters$School)
hist(painters$Composition)
hist(painters$Drawing)
hist(painters$Colour)
hist(painters$Expression)
hist(painters$Drawing)
hist(painters$Drawing)
mean(2,3,3)
mean(2,7,3)
painters[1,1]
mean(c(2,7,3))
painters[mean(c(painters$Composition, painters$Drawing, painters$Colour, painters$Expression)),1]
painters[mean(c(painters$Composition, painters$Drawing, painters$Colour, painters$Expression)),]
mean(c(painters$Composition, painters$Drawing, painters$Colour, painters$Expression))
painters[mean(c(painters$Composition, painters$Drawing, painters$Colour, painters$Expression)),2]
painters[mean(c(painters$Composition, painters$Drawing, painters$Colour, painters$Expression)),1:9]
painters[painters$Composition,1:9]
painters[painters$Composition,1:9]
painters['Composition',1:9]
painters['Composition',]
painters['Composition',]
painters[,]
painters[,mean(c(painters$Composition, painters$Drawing,
painters$Colour, painters$Expression))]
painters[mean(c(painters$Composition, painters$Drawing,
painters$Colour, painters$Expression))]
painters[mean(c(painters$Composition, painters$Drawing,
painters$Colour, painters$Expression)),]
painters[,"Raphael"]
painters["Raphael",]
mean(c(painters$Composition, painters$Drawing,
+                  painters$Colour, painters$Expression))
painters[10,]
mean(c(painters$Composition, painters$Drawing,
painters$Colour, painters$Expression)))
mean(c(painters$Composition, painters$Drawing,
painters$Colour, painters$Expression))
mean(painters$Composition)
moyenne <- painters$Composition + painters$Drawing + painters$Colour
+ painters$Expression
moyenne <- (painters$Composition+painters$Drawing+painters$Colour+painters$Expression)/4
moyenne <- (painters$Composition+painters$Drawing+painters$Colour+painters$Expression)/4
moyenne
nrow(painters)
moy_empiriq <- sum(moyenne)/length(moyenne)
moy_empiriq
painters$Composition[painter[1,]]
painters$Composition[painter[1,:]]
painters$Composition[painter[1]]
painters$Composition[painters[painters$Composition<16,]]
painters[painters$Composition<16,]
painters$Composition[painters[painters$Composition<16,1]]
painters$Composition[painters[painters$Composition<16,]]
moy_empiriq <- sum(moyenne)/length(moyenne)
moy_empiriq <- sum(moyenne)/length(moyenne)
moy_empiriq <- sum(moyenne)/length(moyenne)
moy_empiriq <- sum(moyenne)/length(moyenne)
moy_empiriq <- sum(moyenne)/length(moyenne)
moy_empiriq <- sum(moyenne)/length(moyenne)
painters$Composition[painters[painters$Composition<16,]]
moy_empiriq <- sum(moyenne)/length(moyenne)
sort(moyenne)
var(moyenne)
sd(moyenne)
?var
2**2
(moyenne - moy_empiriq)**2)/len(moyenne)
(moyenne - moy_empiriq)
(moyenne - moy_empiriq)*(moyenne - moy_empiriq))/len(moyenne)
(moyenne - moy_empiriq)^2)/len(moyenne)
(moyenne - moy_empiriq)^2/len(moyenne)
sum((moyenne - moy_empiriq)^2)/len(moyenne)
sum((moyenne - moy_empiriq)^2)
sum((moyenne - moy_empiriq)^2)/length(moyenne)
var(moyenne)    # variances
length(moyenne)*var(moyenne)/(length(moyenne)-1)
(length(moyenne)-1)*var(moyenne)/length(moyenne)
sum((moyenne - moy_empiriq)^2)/length(moyenne)
sqrt(var(moyenne))
v_c <- (length(moyenne)-1)*var(moyenne)/length(moyenne) # variance non corrigée
sqrt(v_c)
hist(moyenne)
duniform(1, min=0, max=2)
dunif(1, min=0, max=2)
dunif(0, min=0, max=2)
dunif(2, min=0, max=2)
dunif(3, min=0, max=2)
dunif(3, min=0, max=3)
runif(3, min=0, max=2)
?runif
1-pnorm(3,0,1)
pnorm(42,35,6)
pnorm(50,35,6) - pnorm(40,35,6)
?dbinom
dbinom(4, size=5, prob=0.5)
dbinom(29, size=30, prob=0.5)
dbinom(9, size=10, prob=0.5)
1-pbinom(14, size=20, proba=0.5)
1-pbinom(14, size=20, prob=0.5)
1-pbinom(14, size=20, prob=0.5)
1-pbinom(14, size=20, prob=0.5)
pbinom(10, size=20, prob=0.5) - pbinom(15, size=20, prob=0.5)
pbinom(15, size=20, prob=0.5) - pbinom(10, size=20, prob=0.5)
plot(1:100, 1:100)
plot(1:100, 100:200)
plot(1:100, dbinom(1:100,size=20, prob=0.5))
pbinom(10:15, size=20, prob=0.5)
pbinom(15, size=20, prob=0.5) - pbinom(10, size=20, prob=0.5)
sum(pbinom(10:15, size=20, prob=0.5))
sum(dbinom(10:15, size=20, prob=0.5))
pbinom(15, size=20, prob=0.5) - pbinom(10, size=20, prob=0.5)
pbinom(16, size=20, prob=0.5) - pbinom(10, size=20, prob=0.5)
pbinom(16, size=20, prob=0.5) - pbinom(9, size=20, prob=0.5)
sum(dbinom(10:15, size=20, prob=0.5))
pbinom(15, size=20, prob=0.5) - pbinom(9, size=20, prob=0.5)
plot(1:100, dnorm(1:100))
plot(1:100, dnorm(1:100, 5,5))
plot(1:100, dnorm(1:100, 50,5))
plot(1:100, dnorm(1:100, 50,50))
plot(1:100, dnorm(1:100, 50,1))
plot(1:100, dnorm(1:100, 50,10))
?qnorm
qnorm(alpha)
qnorm(0.05)
alpha <- c(0.05, 0.1, 0.9)
qnorm(alpha)
?qchisq
qchisq(alpha)
qchisq(alpha, df=10)
?qt
qt(alpha, df=5)
?qf
?qt
qf(alpha, df1=2, df2=5)
carre <- function(x) {
y <- x * x
return(y)
}
caarre(2)
carre(2)
carre(3)
carre(1:5)
dloi <- function(x,b){
a <- 2/b^2
m <- x<0 | x>b
x[!m]*a
x[m]=0
return(x)
}
curve(dloi(x, 3), from = -5, to = 5)
curve(1:100, dnorm(1:100, 50,10))
plot(1:100, dnorm(1:100, 50,10))
# fonction ploi(x, b) donne la fonction de répartition F de L(b)
ploi <- function(x,b){
a <- 2 / b^2
x[x<0] = 0
x[x>b] = 1
return(x)
}
curve(ploi(x, 3), from = -5, to = 5)
# fonction qloi(alpha, b) qui renvoie les fractiles fα = F−1(α) de la loi L(b)
# F−1(0) = 0 et F−1(1) = b
qloi <- function(q,b){
a <- 2 / b^2
sqrt(2 * q / a)
}
rloi <- function(n, b){
x <- runif(n)
qloi(x,b)
}
hist(rloi(1000,3))
# loi L(b)
dloi <- function(x,b){
a <- 2 / b^2
y <- a * x
m <- x<0 | x>b
x[m] <- 0
return(y)
}
# from et to = bornes entre lesquelles tracer la courbe
curve(dloi(x, 3), from = -5, to = 5)
# fonction ploi(x, b) donne la fonction de répartition F de L(b)
ploi <- function(x,b){
a <- 2 / b^2
y = a * x^2/2
y[x<0] <- 0
y[x>b] <- 1
return(y)
}
rloi <- function(n, b){
x <- runif(n)
qloi(x,b)
}
hist(rloi(1000,3))
plot(1:100, dnorm(1:100, 50,10))
hist(rloi(1000,3))
